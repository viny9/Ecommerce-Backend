// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id
  name      String
  email     String    @unique
  phone     String
  password  String
  isAdmin   Boolean   @default(false)
  stripeId  String
  card      Card?
  cart      Cart?
  list      List?
  address   Address?
  Order     Order[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Address {
  id           String  @id
  cep          String
  city         String
  state        String
  extra        String?
  number       Int
  neighborhood String

  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id])

  orderId String? @unique
  order   Order?  @relation(fields: [orderId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Cart {
  id String @id

  products  CartItem[]
  
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  //Trocar esse relacionamento mais tarde 
  orderId String? @unique
  order   Order?  @relation(fields: [orderId], references: [id])

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?
}

model List {
  id String @id

  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id])

  products  ListItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?
}

model CartItem {
  productId String
  product   Product @relation(fields: [productId], references: [id])

  cartId String
  cart   Cart   @relation(fields: [cartId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@id([productId, cartId])
}

model ListItem {
  productId String
  product   Product @relation(fields: [productId], references: [id])

  listId String
  list   List   @relation(fields: [listId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@id([productId, listId])
}

model Product {
  id    String       @id
  name  String
  price String
  imgs  ProductImg[]
  cat   CartItem[]
  list  ListItem[]

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  orderId String?
  order   Order?  @relation(fields: [orderId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Category {
  id   String @id
  name String

  product Product[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Promotion {
  id          String    @id
  name        String
  percentage  Float
  startAt     DateTime
  endAt       DateTime
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  deletedAt   DateTime?
}

model ProductImg {
  id     String @id
  imgUrl String

  productId String?
  product   Product? @relation(fields: [productId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Order {
  id            String        @unique
  amountTotal   Float
  paymentMethod String
  paymentStatus String
  shippingCost  Float
  installments  Int?
  address       Address?
  cart          Cart?
  product       Product[]
  notification  Notification?

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Card {
  id             String @unique
  lastFourNumber Int
  expMounth      Int
  expYear        Int
  brand          String

  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Notification {
  id         String   @id
  orderAt    DateTime
  message    String
  isCheck    Boolean
  isArchived Boolean

  orderId String? @unique
  Order   Order?  @relation(fields: [orderId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}
